#include <csvm/csvm_cluster_analyser.h>
//DEPRECATED
using namespace std;
using namespace csvm;

ClusterAnalyser::ClusterAnalyser(){
   
   
}

ClusterAnalyser::~ClusterAnalyser(){
   ;
}

void ClusterAnalyser::setSettings(ClusterAnalyserSettings set){
   settings = set;
   switch(settings.method){
     case CSVM_RBM:
       rbm.setSettings(settings.rbmSettings);  //TODO: 
       break;
     
   }
}

void ClusterAnalyser::studyFeaturesRBM(vector<Feature> features){
   unsigned int nFeatures = features.size();
   unsigned int featureDim = features[0].content.size();
   cout << "Studying " << nFeatures << " 1 x " << featureDim << " dimensional features\n";
   float** data;
   
  
   data = (float**) malloc(nFeatures * sizeof(float*));
   assert(data!=NULL);
   
   for(size_t idx = 0; idx < nFeatures; ++ idx){
      data[idx] = (float*) malloc(featureDim * sizeof(float));
      assert(data[idx] != NULL);
      for(size_t idx1 = 0; idx1 < featureDim; ++idx1){
         data[idx][idx1] = features[idx].content[idx1];
      }
   }
   features.clear();
   cout << "Created RBM dataset with " << nFeatures << " 1 x " << featureDim << " features\n";
   rbm.linkDataset(data,nFeatures);
   rbm.train();
   rbm.freeDataset();
}

void ClusterAnalyser::studyCoocurences(vector<Feature> patchBatch){
  unsigned int nFeatures = patchBatch.size();
  unsigned int featDims = patchBatch[0].content.size();
  
  for(size_t idx = 0; idx < nFeatures; ++idx){
    for(size_t idx1 = 0; idx1 < featDims; ++idx1){
      for(size_t idx2 = idx1; idx2 < featDims; ++idx2){
	cooc.addCombo(idx1, idx2, patchBatch[idx].content[idx1], patchBatch[idx].content[idx1]);
      }
    }
  }
  
}

